function output = AA_SHCHFILENAME(input_mode,pathnames)

	% Default argument
	if ~exist('input_mode','var')
		
		input_mode = 'initialize';
		
	end
		
	% Name the .mat file with the fourier coefficients
	paramfile = 'AA_PARAMSNAME';
	
	
	switch input_mode
		
		case 'name'
			
			output = 'AA_DISPLAYNAME';
			
		case 'dependency'
			
			output.dependency = {fullfile(pathnames.shchpath,[paramfile '.mat'])};
			
		case 'initialize'

			%%%%
			%%
			%Path definitions

			% Load the points that the user clicked and the time vector
			load(paramfile)
            
            % Check if start and end are the same point, and set boundary
            % conditions accordingly
            if alpha1{1}(1)==alpha1{1}(end) && alpha2{1}(1)==alpha2{1}(end)
                splinemode = 'periodic';
            else
                splinemode = 'complete';
            end
            
            for i = 1:4
                % Generate spline structures for the selected points
                switch splinemode
                    
                    case 'periodic'
                        
                        % Fit a periodic spline to the selected points; the endslopes are found
                        % by averaging the positions of the points before and after the join
                        endslope1 = (alpha1{i}(2)-alpha1{i}(end-1))/(t(end)-t(end-2));
                        endslope2 = (alpha2{i}(2)-alpha2{i}(end-1))/(t(end)-t(end-2));
                        endslope3 = (alpha3{i}(2)-alpha3{i}(end-1))/(t(end)-t(end-2));
                        endslope4 = (alpha4{i}(2)-alpha4{i}(end-1))/(t(end)-t(end-2));
                        spline_alpha1{i} = spline(t,[endslope1;alpha1{i}(:);endslope1]);
                        spline_alpha2{i} = spline(t,[endslope2;alpha2{i}(:);endslope2]);
                        spline_alpha3{i} = spline(t,[endslope3;alpha3{i}(:);endslope3]);
                        spline_alpha4{i} = spline(t,[endslope4;alpha4{i}(:);endslope4]);
                        
                    case 'complete'
                        
                        % Fit a non-periodic spline to the selected points
                        spline_alpha1{i} = spline(t,alpha1{i}(:));
                        spline_alpha2{i} = spline(t,alpha2{i}(:));
                        spline_alpha3{i} = spline(t,alpha3{i}(:));
                        spline_alpha4{i} = spline(t,alpha4{i}(:));
                        
                end
                
                % The gait path is now defined by evaluating the two splines at
                % specified times
                p.phi_def{i} = {@(t) [ppval(spline_alpha1{i},t(:)),ppval(spline_alpha2{i},t(:)),ppval(spline_alpha3{i},t(:)),ppval(spline_alpha4{i},t(:))]};
                
                
                % Speed up execution by defining the gait velocity as well (so
                % the evaluator doesn't need to numerically take the derivative
                % at every time
                spline_dalpha1{i} = ppdiff(spline_alpha1{i});
                spline_dalpha2{i} = ppdiff(spline_alpha2{i});
                spline_dalpha3{i} = ppdiff(spline_alpha3{i});
                spline_dalpha4{i} = ppdiff(spline_alpha4{i});
                
                % The gait path is now defined by evaluating the two splin
                % derivatives at specified times
                p.dphi_def{i} = {@(t) [ppval(spline_dalpha1{i},t(:)),ppval(spline_dalpha2{i},t(:)),ppval(spline_dalpha3{i},t(:)),ppval(spline_dalpha4{i},t(:))]};
            end
			
			%marker locations
			p.phi_marker = [];
			
			%arrows to plot
			p.phi_arrows = 2;

			%time to run path
			p.time_def = t([1 end]); %#ok<COLND>


			%path resolution
			p.phi_res = 50;
			
			p.cBVI_method = 'simple';


			%%%%
			%Save the shch properties
			output = p;
	end
	
end